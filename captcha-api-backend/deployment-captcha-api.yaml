apiVersion: apps/v1
kind: Deployment
metadata:
  name: captcha-api-backend
  namespace: captcha
spec:
  replicas: 2
  selector:
    matchLabels:
      app: captcha-api-backend
  template:
    metadata:
      labels:
        app: captcha-api-backend
        tags.datadoghq.com/env: "production"
        tags.datadoghq.com/service: "captcha-api-backend"
        tags.datadoghq.com/version: "1.0.0"
      annotations:
        admission.datadoghq.com/enabled: "true"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: captcha-api-backend
                topologyKey: kubernetes.io/hostname
      nodeSelector:
        node-type: captcha-api
      imagePullSecrets:
        - name: kcr-pull-secret
      containers:
        - name: captcha-api-backend
          image: kc-sfacspace.kr-central-2.kcr.dev/team1-repo/captcha-api-backend:54e0ad16153d5efc62af6950e074d6a38520b9cc
          ports:
            - containerPort: 80
          env:
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_GIT_REPOSITORY_URL
              value: github.com/find-your-humanity/captcha-api
            - name: DD_TRACE_AGENT_URL
              value: "http://datadog-agent.default.svc.cluster.local:8126"
            - name: DD_RUNTIME_METRICS_ENABLED
              value: "true"
            - name: DD_TRACE_SAMPLE_RATE
              value: "1"
            - name: DD_PROFILING_ENABLED
              value: "false"
            - name: DD_ENV # 환경 구분 (e.g., production, staging)
              value: "production"
            - name: DD_SERVICE # 서비스 이름
              value: "captcha-api-backend"
            - name: DD_VERSION # 서비스 버전 (선택 사항)
              value: "1.0.0"
            - name: DB_HOST
              value: "az-a.team1-db.1bb3c9ceb1db43928600b93b2a2b1d50.mysql.managed-service.kr-central-2.kakaocloud.com"
            - name: DB_PORT
              value: "13306"
            - name: DB_USER
              value: "realcatcha"
            - name: DB_PASSWORD
              value: "realcatcha"
            - name: DB_NAME
              value: "captcha"
            - name: TZ
              value: "Asia/Seoul"
            - name: DEMO_SECRET_KEY
              value: "rc_sk_273d06a8a03799f7637083b50f4f08f2aa29ffb56fd1bfe64833850b4b16810c"
          resources:
            requests:
              memory: "4Gi"
              cpu: "1"
            limits:
              memory: "8Gi"
              cpu: "4"
          livenessProbe:
            httpGet:
              path: /live # Tip: 가능하다면 DB 연결 등 없이 200 OK만 빠르게 반환하는 /healthz 같은 경량 엔드포인트를 만드세요.
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5      # [수정] Probe 타임아웃을 5초로 늘려 부하 상황에서 응답 지연을 허용합니다.
            failureThreshold: 3    # [수정] 3번 연속 실패 시 재시작하도록 명시합니다 (기본값이지만 명시적으로 관리).
          readinessProbe:
            httpGet:
              path: /ready # Tip: 이 경로는 DB 연결 등 실제 서비스 가능 상태를 확인하는 것이 좋습니다.
              port: 80
            initialDelaySeconds: 15 # [수정] 애플리케이션이 완전히 구동될 시간을 충분히 주기 위해 15초로 늘립니다.
            periodSeconds: 5
            timeoutSeconds: 5       # [수정] Readiness Probe도 타임아웃을 5초로 설정합니다.
            failureThreshold: 3